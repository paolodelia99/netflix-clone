{"version":3,"sources":["actions/searchResult.js","actions/types.js","components/Layout/SearchBar.js","components/Layout/AppNavbar.js","actions/movies.js","actions/tvShows.js","actions/selectedItems.js","components/Items/TrendingItem.js","components/Items/MovieItem.js","components/Items/TvShowItem.js","components/ItemsSlider.js","components/Layout/LoadingPage.js","components/DashBoard/HomePage.js","actions/trendings.js","components/DashBoard/MoviesPage.js","components/DashBoard/TvShowsPage.js","components/SearchPage.js","reducers/movies.js","reducers/trending.js","reducers/tvShows.js","reducers/searchResult.js","reducers/selectedItems.js","reducers/index.js","store.js","components/ItemDetail/MovieDetail.js","components/ItemDetail/TvShowDetail.js","App.js","serviceWorker.js","index.js","resources/movie.jpg"],"names":["getSearchMovies","keyowrd","dispatch","a","moviesList","axios","get","key","res","data","console","log","movieItem","title","id","overview","popularity","voteCount","voteAverage","releaseDate","posterPath","push","type","payload","getSearchTvShows","keyword","tvShowsList","tvShowItem","name","firstAirDate","connect","getSearchResult","useState","setKeyyword","useEffect","className","onClick","e","to","placeholder","aria-label","onChange","target","value","AppNavbar","props","isOpen","setIsOpen","Navbar","color","light","expand","NavbarToggler","Collapse","navbar","Nav","NavItem","exact","activeStyle","fontWeight","getAllMovies","getMoviesData","getAllTvShows","getTvShowsData","setCurrentMovie","currentMovie","setCurrentTvShow","currentTvShow","children","trendItem","src","alt","mediaType","fromSearchPage","animationIn","animationOut","animationInDuration","animationOutDuration","isVisible","onError","DefaultImage","ItemSlider","createChildren","map","child","style","height","changeActiveItem","activeItemIndex","setState","this","state","childrenList","length","classes","wrapper","itemsWrapper","itemWrapper","itemsInnerWrapper","rightChevronWrapper","leftChevronWrapper","numberOfCards","gutter","showSlither","firstAndLastGutter","freeScrolling","requestToChangeActive","activePosition","chevronWidth","rightChevron","leftChevron","outsideChevron","infiniteLoop","Component","LoadingPage","width","display","alignItems","justifyContent","margin","background","Spinner","movies","tvShows","trending","getTrendings","trendingList","trendingItem","hasOwnProperty","popularMovies","arePopularMoviesLoading","popularTvShows","arePopularLoading","isLoading","firstUpdate","useRef","useLayoutEffect","current","Row","Col","nowPlayingMovies","topRatedMovies","upComingMovies","topRatedTvShows","airingTodayTvShows","areTopRatedLoading","onAirTvShows","areAiringTodayLoading","areOnAirLoading","searchResult","searchedMovies","areMoviesLoading","searchedTvShows","areTvShowsLoading","movie","tvShowList","tvShow","initialState","initalState","combineReducers","action","selectedItems","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","path","component","HomePage","MoviesPage","TvShowsPage","SearchPage","MovieDetail","TvShowDetail","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.7340d50f.chunk.js","sourcesContent":["import {\r\n    GET_SEARCH_MOVIES,\r\n    GET_SEARCH_TV_SHOWS\r\n} from \"./types\";\r\n\r\nimport axios from 'axios'\r\n\r\nexport const getSearchResult = (keyword) => dispatch => {\r\n    dispatch(getSearchMovies(keyword))\r\n    dispatch(getSearchTvShows(keyword))\r\n}\r\n\r\nconst getSearchMovies = (keyowrd) => async dispatch => {\r\n    let moviesList = [];\r\n\r\n    try {\r\n        const res = await axios.get(`https://api.themoviedb.org/3/search/movie?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&query=${keyowrd}&page=1`)\r\n\r\n        const data = res.data;\r\n\r\n        console.log(data)\r\n\r\n        for (let key in data['results']){\r\n            let movieItem = {}\r\n\r\n            movieItem.title = data['results'][key]['title']\r\n            movieItem.id = data['results'][key]['id']\r\n            movieItem.overview = data['results'][key]['overview']\r\n            movieItem.popularity = data['results'][key]['popularity']\r\n            movieItem.voteCount = data['results'][key]['vote_count']\r\n            movieItem.voteAverage = data['results'][key]['vote_average']\r\n            movieItem.releaseDate = data['results'][key]['release_date']\r\n            movieItem.posterPath = data['results'][key]['poster_path']\r\n\r\n            moviesList.push(movieItem)\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_SEARCH_MOVIES,\r\n            payload: moviesList\r\n        })\r\n\r\n    }catch (e) {\r\n        // fixme: handle error in a proper way\r\n        console.log('Server error')\r\n    }\r\n};\r\n\r\nconst getSearchTvShows = keyword => async dispatch => {\r\n    let tvShowsList = [];\r\n\r\n    try {\r\n        const res = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&query=${keyword}&page=1`)\r\n\r\n        const data = res.data;\r\n\r\n        for(let key in data['results']){\r\n            let tvShowItem = {}\r\n\r\n            tvShowItem.name = data['results'][key]['name'];\r\n            tvShowItem.posterPath = data['results'][key]['poster_path']\r\n            tvShowItem.id = data['results'][key]['id']\r\n            tvShowItem.overview = data['results'][key]['overview']\r\n            tvShowItem.popularity = data['results'][key]['popularity']\r\n            tvShowItem.voteCount = data['results'][key]['vote_count']\r\n            tvShowItem.firstAirDate = data['results'][key]['first_air_date']\r\n\r\n            tvShowsList.push(tvShowItem)\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_SEARCH_TV_SHOWS,\r\n            payload: tvShowsList\r\n        })\r\n    }catch (e) {\r\n        // fixme: handle error in a proper way\r\n        console.log('Server error')\r\n    }\r\n}","export const GET_POPULAR_MOVIES = 'GET_POPULAR_MOVIES';\r\nexport const GET_TOP_RATED_MOVIES = 'GET_TOP_RATED_MOVIES';\r\nexport const GET_NOW_PLAYING_MOVIES = 'GET_NOW_PLAYING_MOVIES';\r\nexport const GET_UP_COMING_MOVIES = 'GET_UP_COMING_MOVIES';\r\nexport const GET_TRENDINGS = 'GET_TRENDINGS';\r\nexport const GET_TV_AIRING_TODAY = 'GET_TV_AIRING_TODAY';\r\nexport const GET_TV_ON_AIR = 'GET_TV_AIRING_TODAY';\r\nexport const GET_POPULAR_TV_SHOWS = 'GET_POPULAR_TV_SHOWS';\r\nexport const GET_TOP_RATED_TV_SHOWS = 'GET_TOP_RATED_TV_SHOWS';\r\nexport const GET_SEARCH_MOVIES = 'GET_SEARCH_MOVIES';\r\nexport const GET_SEARCH_TV_SHOWS = 'GET_SEARCH_TV_SHOWS';\r\nexport const SET_CURRENT_MOVIE = 'SET_CURRENT_MOVIE';\r\nexport const SET_CURRENT_TV_SHOW = 'SET_CURRENT_TV_SHOW';\r\nexport const TAKE_OUT_CURRENT_MOVIE = 'TAKE_OUT_CURRENT_MOVIE';\r\nexport const TAKE_OUT_CURRENT_TV_SHOW = 'TAKE_OUT_CURRENT_TV_SHOW'","import React,{useState, useEffect} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {getSearchResult} from '../../actions/searchResult';\r\n\r\nconst SearchBar = ({getSearchResult}) => {\r\n    const [keyword,setKeyyword] = useState('');\r\n    useEffect(()=> {\r\n        console.log(keyword)\r\n    },[keyword])\r\n\r\n    const onChangeKeyWord = e => {\r\n        setKeyyword(e.target.value)\r\n    }\r\n\r\n    const setSearchPage = e => {\r\n        getSearchResult(keyword)\r\n    }\r\n\r\n    return (\r\n        <div className='search-bar-wrapper'>\r\n            <div className=\"input-group md-form form-sm form-1 pl-0 border-dark\">\r\n                <div className=\"input-group-prepend input-group-custom-wrapper\">\r\n                  <Link\r\n                      onClick={setSearchPage}\r\n                      to={`/search/${keyword}`}\r\n                      className=\"input-group-text purple lighten-3 btn-span text-decoration-none\"\r\n                      id=\"basic-text1\"\r\n                  >\r\n                     <i className=\"fa fa-search\"/>\r\n                  </Link>\r\n                </div>\r\n                <input className=\"form-control my-0 py-1 bg-dark text-white\"\r\n                       type=\"text\"\r\n                       placeholder=\"Search\"\r\n                       aria-label=\"Search\"\r\n                       onChange={onChangeKeyWord}\r\n                       value={keyword}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nSearchBar.propTypes = {\r\n    getSearchResult: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,{getSearchResult})(SearchBar);","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem } from 'reactstrap';\r\nimport {Link, NavLink} from 'react-router-dom'\r\nimport SearchBar from \"./SearchBar\";\r\n\r\nconst AppNavbar = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const toggle = () => setIsOpen(!isOpen);\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" light expand=\"md\">\r\n                <Link to='/' className='custom-nav-bar main-logo text-decoration-none'>\r\n                    Movie App\r\n                </Link>\r\n                <NavbarToggler onClick={toggle} />\r\n                <Collapse isOpen={isOpen} navbar>\r\n                    <Nav navbar className='nav-items-container custom-nav-bar' >\r\n                        <NavItem className='custom-nav-item'>\r\n                            <NavLink exact to=\"/\" className='nav-link-text'  activeStyle={{fontWeight: \"bold\"}} >Home</NavLink>\r\n                        </NavItem>\r\n                        <NavItem className='custom-nav-item'>\r\n                            <NavLink to=\"/movies\" className='nav-link-text' activeStyle={{fontWeight: \"bold\"}} >Movies</NavLink>\r\n                        </NavItem>\r\n                        <NavItem className='custom-nav-item'>\r\n                            <NavLink to=\"/tv-shows\" className='nav-link-text' activeStyle={{fontWeight: \"bold\"}} >Tv Shows</NavLink>\r\n                        </NavItem>\r\n                        <NavItem className='pusher-nav-item'/>\r\n                        <NavItem className='custom-nav-item search-bar-item'>\r\n                            <SearchBar/>\r\n                        </NavItem>\r\n                    </Nav>\r\n                </Collapse>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppNavbar;","import {\r\n    GET_UP_COMING_MOVIES,\r\n    GET_TOP_RATED_MOVIES,\r\n    GET_POPULAR_MOVIES,\r\n    GET_NOW_PLAYING_MOVIES\r\n} from \"./types\";\r\nimport axios from 'axios'\r\n\r\nexport const getAllMovies = () => dispatch => {\r\n    dispatch(getMoviesData('popular'))\r\n    dispatch(getMoviesData('top Rated'))\r\n    dispatch(getMoviesData('now Playing'))\r\n    dispatch(getMoviesData('up Coming'))\r\n};\r\n\r\nconst getMoviesData = (keyword) => async dispatch => {\r\n    let moviesList = [];\r\n\r\n    try{\r\n        let res;\r\n\r\n        switch (keyword) {\r\n            case 'popular':\r\n                res = await axios.get('https://api.themoviedb.org/3/movie/popular?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            case 'top Rated':\r\n                res = await axios.get('https://api.themoviedb.org/3/movie/top_rated?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            case 'now Playing':\r\n                res = await axios.get('https://api.themoviedb.org/3/movie/now_playing?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1')\r\n                break;\r\n            case 'up Coming':\r\n                res = await axios.get('https://api.themoviedb.org/3/movie/upcoming?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1\\n')\r\n                break;\r\n            default:\r\n                res = await axios.get('https://api.themoviedb.org/3/movie/popular?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n        }\r\n\r\n        const data = res.data;\r\n\r\n        for(let key in data['results']){\r\n            let movieItem = {}\r\n\r\n            movieItem.title = data['results'][key]['title']\r\n            movieItem.id = data['results'][key]['id']\r\n            movieItem.overview = data['results'][key]['overview']\r\n            movieItem.popularity = data['results'][key]['popularity']\r\n            movieItem.voteCount = data['results'][key]['vote_count']\r\n            movieItem.voteAverage = data['results'][key]['vote_average']\r\n            movieItem.releaseDate = data['results'][key]['release_date']\r\n            movieItem.posterPath = data['results'][key]['poster_path']\r\n\r\n            moviesList.push(movieItem)\r\n        }\r\n\r\n        switch (keyword) {\r\n            case 'popular':\r\n                dispatch({\r\n                    type: GET_POPULAR_MOVIES,\r\n                    payload: moviesList\r\n                })\r\n                break;\r\n            case 'top Rated':\r\n                dispatch({\r\n                    type: GET_TOP_RATED_MOVIES,\r\n                    payload: moviesList\r\n                });\r\n                break;\r\n            case 'now Playing':\r\n                dispatch({\r\n                    type: GET_NOW_PLAYING_MOVIES,\r\n                    payload: moviesList\r\n                })\r\n                break;\r\n            case 'up Coming':\r\n                dispatch({\r\n                    type: GET_UP_COMING_MOVIES,\r\n                    payload: moviesList\r\n                })\r\n                break;\r\n            default:\r\n                dispatch({\r\n                    type: GET_POPULAR_MOVIES,\r\n                    payload: moviesList\r\n                });\r\n        }\r\n\r\n    }catch (e) {\r\n        //fixme: handle error in a proper way\r\n        console.log('Server error')\r\n    }\r\n};","import {\r\n    GET_POPULAR_TV_SHOWS,\r\n    GET_TOP_RATED_TV_SHOWS,\r\n    GET_TV_AIRING_TODAY,\r\n    GET_TV_ON_AIR\r\n} from \"./types\";\r\nimport axios from 'axios'\r\n\r\nexport const getAllTvShows = () => dispatch => {\r\n    dispatch(getTvShowsData('popular'))\r\n    dispatch(getTvShowsData('top Rated'))\r\n    dispatch(getTvShowsData('airing Today'))\r\n    dispatch(getTvShowsData('on Air'))\r\n};\r\n\r\nconst getTvShowsData = (keyword) => async dispatch => {\r\n    let tvShowsList = [];\r\n    try{\r\n        let res;\r\n        switch (keyword) {\r\n            case 'popular':\r\n                res = await axios.get('https://api.themoviedb.org/3/tv/popular?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            case 'top Rated':\r\n                res = await axios.get('https://api.themoviedb.org/3/tv/top_rated?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            case 'airing Today':\r\n                res = await axios.get('https://api.themoviedb.org/3/tv/airing_today?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            case 'on Air':\r\n                res = await axios.get('https://api.themoviedb.org/3/tv/on_the_air?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n                break;\r\n            default:\r\n                res = await axios.get('https://api.themoviedb.org/3/tv/popular?api_key=d00af0decd09caba18f91c6f78bd9936&language=en-US&page=1');\r\n        }\r\n\r\n        const data = res.data;\r\n\r\n        for(let key in data['results']){\r\n            let tvShowItem = {}\r\n\r\n            tvShowItem.name = data['results'][key]['name'];\r\n            tvShowItem.posterPath = data['results'][key]['poster_path']\r\n            tvShowItem.id = data['results'][key]['id']\r\n            tvShowItem.overview = data['results'][key]['overview']\r\n            tvShowItem.popularity = data['results'][key]['popularity']\r\n            tvShowItem.voteAverage = data['results'][key]['vote_average']\r\n            tvShowItem.voteCount = data['results'][key]['vote_count']\r\n            tvShowItem.firstAirDate = data['results'][key]['first_air_date']\r\n\r\n            tvShowsList.push(tvShowItem)\r\n        }\r\n\r\n        switch (keyword) {\r\n            case 'popular':\r\n                dispatch({\r\n                    type: GET_POPULAR_TV_SHOWS,\r\n                    payload: tvShowsList\r\n                });\r\n                break;\r\n            case 'top Rated':\r\n                dispatch({\r\n                    type: GET_TOP_RATED_TV_SHOWS,\r\n                    payload: tvShowsList\r\n                });\r\n                break;\r\n            case 'airing Today':\r\n                dispatch({\r\n                    type: GET_TV_AIRING_TODAY,\r\n                    payload: tvShowsList\r\n                });\r\n                break;\r\n            case 'on Air':\r\n                dispatch({\r\n                    type: GET_TV_ON_AIR,\r\n                    payload: tvShowsList\r\n                });\r\n                break;\r\n            default:\r\n                dispatch({\r\n                    type: GET_POPULAR_TV_SHOWS,\r\n                    payload: tvShowsList\r\n                });\r\n        }\r\n\r\n    }catch (e) {\r\n        //fixme: handle error in a proper way\r\n        console.log('Server error')\r\n    }\r\n};\r\n","import {\r\n    SET_CURRENT_MOVIE,\r\n    SET_CURRENT_TV_SHOW,\r\n    TAKE_OUT_CURRENT_MOVIE,\r\n    TAKE_OUT_CURRENT_TV_SHOW\r\n} from \"../actions/types\";\r\n\r\nexport const setCurrentMovie = currentMovie => dispatch => {\r\n    dispatch({\r\n        type: SET_CURRENT_MOVIE,\r\n        payload: currentMovie\r\n    })\r\n};\r\n\r\nexport const setCurrentTvShow = currentTvShow => dispatch => {\r\n    dispatch({\r\n        type: SET_CURRENT_TV_SHOW,\r\n        payload: currentTvShow\r\n    })\r\n};\r\n\r\nexport const takeOutEveryThing = () => dispatch => {\r\n    dispatch(takeOutCurrentMovie())\r\n    dispatch(takeOutCurrentTvShow())\r\n};\r\n\r\nconst takeOutCurrentMovie = () => dispatch => {\r\n    dispatch({\r\n        type: TAKE_OUT_CURRENT_MOVIE,\r\n    })\r\n}\r\n\r\nconst takeOutCurrentTvShow = () => dispatch => {\r\n    dispatch({\r\n        type: TAKE_OUT_CURRENT_TV_SHOW,\r\n    })\r\n}","import React from 'react';\r\nimport {connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'react-router-dom'\r\nimport {setCurrentMovie, setCurrentTvShow} from \"../../actions/selectedItems\";\r\n\r\nconst TrendingItem = ({trendItem,setCurrentMovie,setCurrentTvShow}) => {\r\n\r\n    const getTheRightLink = (children) => {\r\n      return  trendItem.mediaType === 'movie' ? (\r\n          <Link to={`/movie/${trendItem.title}`} onClick={()=> setCurrentMovie(trendItem)}>\r\n              {children}\r\n          </Link>\r\n      ) : (\r\n          <Link to={`/tv-show/${trendItem.name}`} onClick={()=> setCurrentTvShow(trendItem)}>\r\n              {children}\r\n          </Link>\r\n      )\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card bg-dark text-white item\">\r\n                {getTheRightLink(\r\n                    <img src={`https://image.tmdb.org/t/p/w342${trendItem.posterPath}`} className=\"card-img\" alt=\"...\" />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTrendingItem.propTypes = {\r\n    trendItem: PropTypes.object.isRequired,\r\n    setCurrentTvShow: PropTypes.func.isRequired,\r\n    setCurrentMovie: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,\r\n    {\r\n        setCurrentTvShow,\r\n        setCurrentMovie\r\n    }\r\n    )(TrendingItem);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport DefaultImage from '../../resources/movie.jpg'\r\nimport {Animated} from \"react-animated-css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {setCurrentMovie} from \"../../actions/selectedItems\";\r\n\r\nimport {connect} from 'react-redux'\r\n\r\nconst MovieItem = ({movieItem,fromSearchPage,setCurrentMovie}) => {\r\n\r\n    const returnRightImage = () => (\r\n        fromSearchPage ?\r\n            (\r\n                <div className='searched-item'>\r\n                    <Animated animationIn=\"zoomIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                        <div className={`card bg-dark text-white ${fromSearchPage ? 'searched-item': null}`}>\r\n                            <Link  to={`/movie/${movieItem.title}`} onClick={() => setCurrentMovie(movieItem)}>\r\n                                <img\r\n                                    src={`https://image.tmdb.org/t/p/w500${movieItem.posterPath}`}\r\n                                    onError={ e => e.target.src = DefaultImage}\r\n                                    className=\"card-img\"  alt=\"...\"/>\r\n                            </Link>\r\n                        </div>\r\n                    </Animated>\r\n                </div>\r\n            ) :\r\n            (\r\n                <div>\r\n                    <div className={`card bg-dark text-white ${fromSearchPage ? 'searched-item': null}`} >\r\n                        <Link to={`/movie/${movieItem.title}`} onClick={()=> setCurrentMovie(movieItem)}>\r\n                            <img src={`https://image.tmdb.org/t/p/w500${movieItem.posterPath}`} className=\"card-img\"  alt=\"...\"/>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            )\r\n    )\r\n\r\n    return (\r\n        returnRightImage()\r\n    );\r\n};\r\n\r\nMovieItem.propTypes = {\r\n    movieItem: PropTypes.object.isRequired,\r\n    fromSearchPage: PropTypes.bool.isRequired,\r\n    setCurrentMovie: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,{setCurrentMovie})(MovieItem);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DefaultImage from '../../resources/movie.jpg'\r\nimport {Animated} from \"react-animated-css\";\r\n\r\nimport {connect} from 'react-redux'\r\nimport {setCurrentTvShow} from \"../../actions/selectedItems\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst TvShowItem = ({tvShowItem,fromSearchPage,setCurrentTvShow}) => {\r\n\r\n    const returnRightImage = () =>(\r\n        fromSearchPage ?\r\n            (\r\n\r\n                <div className='searched-item'>\r\n                    <Animated animationIn=\"zoomIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                        <div className={`card bg-dark text-white`}>\r\n                            <Link to={`/tv-show/${tvShowItem.name}`} onClick={()=> setCurrentTvShow(tvShowItem)}>\r\n                                <img\r\n                                    src={`https://image.tmdb.org/t/p/w500${tvShowItem.posterPath}`}\r\n                                    onError={ e => e.target.src = DefaultImage}\r\n                                    className=\"card-img\" alt=\"...\" />\r\n                            </Link>\r\n                        </div>\r\n                    </Animated>\r\n                </div>\r\n            ):\r\n            (\r\n                <div>\r\n                    <div className={`card bg-dark text-white`}>\r\n                        <Link to={`/tv-show/${tvShowItem.name}`} onClick={()=> setCurrentTvShow(tvShowItem)}>\r\n                            <img src={`https://image.tmdb.org/t/p/w500${tvShowItem.posterPath}`} className=\"card-img\" alt=\"...\" />\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            )\r\n    )\r\n\r\n    return (\r\n        returnRightImage()\r\n    );\r\n};\r\n\r\nTvShowItem.propTypes = {\r\n    tvShowItem: PropTypes.object.isRequired,\r\n    fromSearchPage: PropTypes.bool.isRequired,\r\n    setCurrentTvShow: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null,{setCurrentTvShow})(TvShowItem);","import React, {Component} from 'react';\r\nimport ItemsCarousel from 'react-items-carousel';\r\nimport TrendingItem from \"./Items/TrendingItem\";\r\n\r\nimport PropTypes from 'prop-types';\r\nimport MovieItem from \"./Items/MovieItem\";\r\nimport TvShowItem from \"./Items/TvShowItem\";\r\n\r\nclass ItemSlider extends Component {\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n            activeItemIndex: 0,\r\n        });\r\n    }\r\n\r\n    createChildren = (type, children) => {\r\n        switch (type) {\r\n            case 'trending':\r\n                return children.map(child => <TrendingItem key={child.id} style={{ height: 250 }} trendItem={child}/>);\r\n            case 'movies':\r\n                return children.map(child => <MovieItem key={child.id} fromSearchPage={false} style={{ height: 250 }} movieItem={child}/>);\r\n            case 'tvShows':\r\n                return children.map(child => <TvShowItem key={child.id} fromSearchPage={false} style={{ height: 250 }} tvShowItem={child}/>)\r\n            default:\r\n                return children.map(child => <TrendingItem key={child.id} style={{ height: 250 }} trendItem={child}/>);\r\n        }\r\n    }\r\n\r\n    changeActiveItem = (activeItemIndex) => this.setState({ activeItemIndex });\r\n\r\n    render() {\r\n        const {\r\n            activeItemIndex\r\n        } = this.state;\r\n\r\n        const {children, type} =  this.props;\r\n\r\n        const childrenList = children.length ? this.createChildren(type, children) : []\r\n\r\n        return (\r\n            <ItemsCarousel\r\n                classes={{\r\n                    wrapper: 'customs-slider-big-wrapper',\r\n                    itemsWrapper: 'slider-wrapper',\r\n                    itemWrapper: 'custom-item-wrapper',\r\n                    itemsInnerWrapper: 'custom-inner-items-wrapper',\r\n                    rightChevronWrapper: 'right-chevron-wrapper',\r\n                    leftChevronWrapper: 'left-chevron-wrapper'\r\n                }}\r\n                // Carousel configurations\r\n                numberOfCards={5}\r\n                gutter={12}\r\n                showSlither={true}\r\n                firstAndLastGutter={true}\r\n                freeScrolling={false}\r\n\r\n                // Active item configurations\r\n                requestToChangeActive={this.changeActiveItem}\r\n                activeItemIndex={activeItemIndex}\r\n                activePosition={'center'}\r\n\r\n                chevronWidth={24}\r\n                rightChevron={<button className='circle'>{'>'}</button>}\r\n                leftChevron={<button className='circle'>{'<'}</button>}\r\n                outsideChevron={false}\r\n                infiniteLoop={true}\r\n            >\r\n                {childrenList}\r\n            </ItemsCarousel>\r\n        );\r\n    }\r\n}\r\n\r\nItemSlider.propTypes = {\r\n    children: PropTypes.array.isRequired,\r\n    type: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ItemSlider;","import React, {Fragment} from 'react';\r\nimport {Spinner} from 'reactstrap'\r\n\r\nconst LoadingPage = () => {\r\n    return (\r\n        <Fragment>\r\n            <div style={ {width: '100%',\r\n                height: '100%',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'}}>\r\n                <div style={{\r\n                    margin: 'auto',\r\n                    height:'400px',\r\n                    width: '400px',\r\n                    background: 'none',\r\n                    color: 'white',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center'\r\n                }}>\r\n                    <Spinner color='danger' style={{ width: '3rem', height: '3rem', margin: 'auto',display: 'block' }} />\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default LoadingPage;","import React,{useRef,useLayoutEffect} from 'react';\r\n// Redux imports\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {getAllMovies} from \"../../actions/movies\";\r\nimport {getTrendings} from \"../../actions/trendings\";\r\nimport {getAllTvShows} from \"../../actions/tvShows\";\r\n//Other components imports\r\nimport {Col, Row, Spinner} from \"reactstrap\";\r\nimport ItemSlider from \"../ItemsSlider\";\r\nimport LoadingPage from \"../Layout/LoadingPage\";\r\nimport {Animated} from \"react-animated-css\";\r\n\r\nconst HomePage =\r\n    ({\r\n         movies: {popularMovies, arePopularMoviesLoading},\r\n         tvShows: {popularTvShows,arePopularLoading},\r\n         trending: {trendingList,isLoading},\r\n         getAllMovies,\r\n        getTrendings,\r\n        getAllTvShows\r\n     }) => {\r\n    const firstUpdate = useRef(true);\r\n\r\n    useLayoutEffect(() => {\r\n        if (firstUpdate.current) {\r\n            firstUpdate.current = false;\r\n            getAllMovies();\r\n            getAllTvShows();\r\n            getTrendings();\r\n            return;\r\n        }\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <div className='page-container'>\r\n            <Row className='category-wrapper first-category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Trending Now</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {trendingList.length ?\r\n                        <Animated className=\"animation-wrapper\" animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                            <ItemSlider children={trendingList} type={'trending'}/>\r\n                        </Animated>\r\n                        :\r\n                        <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Popular Movies</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        popularMovies ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={popularMovies} type={'movies'}/>\r\n                            </Animated>\r\n                        :\r\n                        <LoadingPage/>}\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Popular Tv Shows</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        popularTvShows ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={popularTvShows} type={'tvShows'}/>\r\n                            </Animated>\r\n                             :\r\n                            <LoadingPage/>}\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nHomePage.propTypes = {\r\n    movies: PropTypes.object.isRequired,\r\n    tvShows: PropTypes.object.isRequired,\r\n    trending: PropTypes.object.isRequired,\r\n    getAllTvShows: PropTypes.func.isRequired,\r\n    getTrendings: PropTypes.func.isRequired,\r\n    getAllMovies: PropTypes.func.isRequired\r\n};\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    movies: state.movies,\r\n    tvShows: state.tvShows,\r\n    trending: state.trending\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    {\r\n        getTrendings,\r\n        getAllTvShows,\r\n        getAllMovies\r\n    }\r\n)(HomePage);","import {GET_TRENDINGS} from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const getTrendings = () => async dispatch => {\r\n    let trendingList = []\r\n\r\n    try{\r\n        const res = await axios.get('https://api.themoviedb.org/3/trending/all/day?api_key=d00af0decd09caba18f91c6f78bd9936')\r\n\r\n        const data = res.data;\r\n        console.log(data)\r\n\r\n        for(let key in data['results']){\r\n            let trendingItem = {}\r\n\r\n            if(data['results'][key].hasOwnProperty('title'))\r\n                trendingItem.title = data['results'][key]['title']\r\n            else\r\n                trendingItem.name = data['results'][key]['name']\r\n\r\n            trendingItem.id = data['results'][key]['id']\r\n            trendingItem.overview = data['results'][key]['overview']\r\n            trendingItem.popularity = data['results'][key]['popularity']\r\n            trendingItem.voteAverage = data['results'][key]['vote_average']\r\n            trendingItem.voteCount = data['results'][key]['vote_count']\r\n            trendingItem.posterPath = data['results'][key]['poster_path']\r\n            trendingItem.releaseDate = data['results'][key]['release_date']\r\n            trendingItem.mediaType = data['results'][key]['media_type']\r\n\r\n            trendingList.push(trendingItem)\r\n        }\r\n\r\n        dispatch({\r\n            type: GET_TRENDINGS,\r\n            payload: trendingList\r\n        })\r\n\r\n    }catch (e) {\r\n        //fixme: handle error in a proper way\r\n        console.log('Server error')\r\n    }\r\n}","import React, {useLayoutEffect, useRef} from 'react';\r\n\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {getAllMovies} from \"../../actions/movies\";\r\n\r\nimport {Col, Row } from \"reactstrap\";\r\nimport ItemSlider from \"../ItemsSlider\";\r\nimport LoadingPage from \"../Layout/LoadingPage\";\r\nimport {Animated} from \"react-animated-css\";\r\n\r\n\r\nconst MoviesPage = (\r\n    {\r\n        movies:\r\n            {\r\n                popularMovies,\r\n                nowPlayingMovies,\r\n                topRatedMovies,\r\n                upComingMovies\r\n            },\r\n        getAllMovies\r\n    }) => {\r\n    const firstUpdate = useRef(true);\r\n\r\n    useLayoutEffect(() => {\r\n        if (firstUpdate.current) {\r\n            firstUpdate.current = false;\r\n            getAllMovies();\r\n            return;\r\n        }\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <div className='page-container'>\r\n            <Row className='category-wrapper first-category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Popular Movies</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        popularMovies.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={popularMovies} type={'movies'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Now Playing</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        nowPlayingMovies.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={nowPlayingMovies} type={'movies'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Top Rated</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        topRatedMovies.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={topRatedMovies} type={'movies'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Up Coming</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        upComingMovies.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={upComingMovies} type={'movies'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nMoviesPage.propTypes = {\r\n    movies: PropTypes.object.isRequired,\r\n    getAllMovies: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    movies: state.movies\r\n});\r\n\r\nexport default connect(mapStateToProps,{getAllMovies})(MoviesPage);","import React, {useLayoutEffect, useRef} from 'react';\r\n\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport {getAllTvShows} from \"../../actions/tvShows\";\r\n\r\nimport {Col, Row, Spinner} from \"reactstrap\";\r\nimport ItemSlider from \"../ItemsSlider\";\r\nimport LoadingPage from \"../Layout/LoadingPage\";\r\nimport {Animated} from \"react-animated-css\";\r\n\r\nconst TvShowsPage = (\r\n    {\r\n        tvShows:\r\n            {\r\n                popularTvShows,\r\n                arePopularLoading,\r\n                topRatedTvShows,\r\n                areTopRatedLoading,\r\n                airingTodayTvShows,\r\n                areAiringTodayLoading,\r\n                onAirTvShows,\r\n                areOnAirLoading\r\n            },\r\n        getAllTvShows\r\n    }) => {\r\n    const firstUpdate = useRef(true);\r\n\r\n    useLayoutEffect(() => {\r\n        if (firstUpdate.current) {\r\n            firstUpdate.current = false;\r\n            getAllTvShows();\r\n            return;\r\n        }\r\n\r\n    },[]);\r\n\r\n    return (\r\n        <div className='page-container'>\r\n            <Row className='category-wrapper first-category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Popular TV Shows</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        popularTvShows.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={popularTvShows} type={'tvShows'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Top Rated TV Shows</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        topRatedTvShows.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={topRatedTvShows} type={'tvShows'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n           {airingTodayTvShows.length ? <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>Airing Today TV Shows</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        airingTodayTvShows.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={airingTodayTvShows} type={'tvShows'}/>\r\n                            </Animated>\r\n                            :\r\n                            null\r\n                    }\r\n                </Col>\r\n            </Row> : null}\r\n            <Row className='category-wrapper'>\r\n                <div className='title-container'>\r\n                    <header>\r\n                        <h3>On Air TV Shows</h3>\r\n                    </header>\r\n                </div>\r\n                <Col className='slider-container'>\r\n                    {\r\n                        onAirTvShows.length ?\r\n                            <Animated animationIn=\"fadeIn\" animationOut=\"fadeOutDown\" animationInDuration={3000} animationOutDuration={1000} isVisible={true}>\r\n                                <ItemSlider children={onAirTvShows} type={'tvShows'}/>\r\n                            </Animated>\r\n                            :\r\n                            <LoadingPage/>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n};\r\n\r\nTvShowsPage.propTypes = {\r\n    tvShows: PropTypes.object.isRequired,\r\n    getAllTvShows: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    tvShows: state.tvShows\r\n});\r\n\r\nexport default connect(mapStateToProps,{getAllTvShows})(TvShowsPage);","import React from 'react';\r\n//Redux\r\nimport {connect} from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport MovieItem from \"./Items/MovieItem\";\r\nimport TvShowItem from \"./Items/TvShowItem\";\r\nimport LoadingPage from \"./Layout/LoadingPage\";\r\n\r\nconst SearchPage = (\r\n    {\r\n        searchResult:\r\n            {\r\n                searchedMovies,\r\n                areMoviesLoading,\r\n                searchedTvShows,\r\n                areTvShowsLoading\r\n            }\r\n    }) => {\r\n\r\n    const moviesList = searchedMovies.map(movie => (\r\n        <MovieItem key={movie.id} movieItem={movie} fromSearchPage={true}/>\r\n    ))\r\n\r\n    const tvShowList = searchedTvShows.map(tvShow => (\r\n        <TvShowItem key={tvShow.id} tvShowItem={tvShow} fromSearchPage={true}/>\r\n    ))\r\n\r\n\r\n    return (\r\n        <div className='search-page-big-wrapper'>\r\n            {\r\n                searchedMovies.length && !areMoviesLoading ?\r\n                    <div className='result-big-wrapper'>\r\n                        <div className='search-title-container'>\r\n                            <header>\r\n                                <h3 className='netflix-text-color'>Movies</h3>\r\n                            </header>\r\n                        </div>\r\n                        <div className='searched-items-wrapper'>\r\n                            {moviesList}\r\n                        </div>\r\n                    </div> : null\r\n            }\r\n            {\r\n                searchedTvShows.length && !areTvShowsLoading ?\r\n                <div className=\"result-big-wrapper\">\r\n                    <div className='search-title-container'>\r\n                        <header>\r\n                            <h3 className='netflix-text-color'>Tv Shows</h3>\r\n                        </header>\r\n                    </div>\r\n                    <div className=\"searched-items-wrapper\">\r\n                        {tvShowList}\r\n                    </div>\r\n                </div> : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    searchResult: state.searchResult\r\n})\r\n\r\nexport default connect(mapStateToProps)(SearchPage);","import {\r\n    GET_NOW_PLAYING_MOVIES,\r\n    GET_POPULAR_MOVIES,\r\n    GET_TOP_RATED_MOVIES,\r\n    GET_UP_COMING_MOVIES\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    popularMovies: [],\r\n    arePopularLoading: true,\r\n    nowPlayingMovies: [],\r\n    topRatedMovies: [],\r\n    upComingMovies: []\r\n};\r\n\r\nexport default function (state=initialState, action) {\r\n    const {type,payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_POPULAR_MOVIES:\r\n            return{\r\n                ...state,\r\n                popularMovies: payload\r\n            };\r\n        case GET_NOW_PLAYING_MOVIES:\r\n            return {\r\n                ...state,\r\n                nowPlayingMovies: payload\r\n            }\r\n        case GET_TOP_RATED_MOVIES:\r\n            return{\r\n                ...state,\r\n                topRatedMovies: payload\r\n            };\r\n        case GET_UP_COMING_MOVIES:\r\n            return {\r\n                ...state,\r\n                upComingMovies: payload\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}","import {GET_TRENDINGS} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    trendingList: [],\r\n    isLoading: true\r\n};\r\n\r\nexport default function (state=initialState,action) {\r\n    const {type,payload} = action;\r\n\r\n    if(type === GET_TRENDINGS){\r\n        return {\r\n            ...state,\r\n            trendingList: payload,\r\n            isLoading: false\r\n        }\r\n    }else{\r\n        return state\r\n    }\r\n}","import {\r\n    GET_POPULAR_TV_SHOWS,\r\n    GET_TOP_RATED_TV_SHOWS,\r\n    GET_TV_AIRING_TODAY,\r\n    GET_TV_ON_AIR\r\n} from \"../actions/types\";\r\n\r\nconst initalState = {\r\n    popularTvShows: [],\r\n    arePopularLoading: true,\r\n    topRatedTvShows: [],\r\n    areTopRatedLoading: true,\r\n    airingTodayTvShows: [],\r\n    areAiringTodayLoading: true,\r\n    onAirTvShows: [],\r\n    areOnAirLoading: true\r\n};\r\n\r\nexport default function (state=initalState,action) {\r\n    const {type,payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_TV_ON_AIR:\r\n            return{\r\n                ...state,\r\n                onAirTvShows: payload,\r\n                areOnAirLoading: false\r\n            };\r\n        case GET_TV_AIRING_TODAY:\r\n            return {\r\n                ...state,\r\n                airingTodayTvShows: payload,\r\n                areAiringTodayLoading: false\r\n            };\r\n        case GET_TOP_RATED_TV_SHOWS:\r\n            return {\r\n                ...state,\r\n                topRatedTvShows: payload,\r\n                areTopRatedLoading: false\r\n            };\r\n        case GET_POPULAR_TV_SHOWS:\r\n            return {\r\n                ...state,\r\n                popularTvShows: payload,\r\n                arePopularLoading: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_SEARCH_TV_SHOWS,\r\n    GET_SEARCH_MOVIES\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    searchedMovies: [],\r\n    areMoviesLoading: true,\r\n    searchedTvShows: [],\r\n    areTvShowsLoading: true\r\n};\r\n\r\nexport default function (state=initialState,action) {\r\n    const {type,payload} = action;\r\n\r\n    switch (type) {\r\n        case GET_SEARCH_MOVIES:\r\n            return{\r\n                ...state,\r\n                searchedMovies: payload,\r\n                areMoviesLoading: false\r\n            }\r\n        case GET_SEARCH_TV_SHOWS:\r\n            return {\r\n                ...state,\r\n                searchedTvShows: payload,\r\n                areTvShowsLoading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    SET_CURRENT_MOVIE,\r\n    SET_CURRENT_TV_SHOW,\r\n    TAKE_OUT_CURRENT_MOVIE,\r\n    TAKE_OUT_CURRENT_TV_SHOW\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    currentMovie: null,\r\n    currentTvShow: null\r\n};\r\n\r\nexport default function (state=initialState,action) {\r\n    const {type,payload} = action;\r\n\r\n    switch (type) {\r\n        case SET_CURRENT_MOVIE:\r\n            return {\r\n                ...state,\r\n                currentMovie: payload\r\n            }\r\n        case SET_CURRENT_TV_SHOW:\r\n            return {\r\n                ...state,\r\n                currentTvShow: payload\r\n            }\r\n        case TAKE_OUT_CURRENT_MOVIE:\r\n            return {\r\n                ...state,\r\n                currentMovie: null\r\n            }\r\n        case TAKE_OUT_CURRENT_TV_SHOW:\r\n            return {\r\n                ...state,\r\n                currentTvShow: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport movies from \"./movies\";\r\nimport trending from \"./trending\";\r\nimport tvShows from \"./tvShows\";\r\nimport searchResult from \"./searchResult\";\r\nimport selectedItems from \"./selectedItems\";\r\n\r\nexport default combineReducers({\r\n    movies,\r\n    trending,\r\n    tvShows,\r\n    searchResult,\r\n    selectedItems\r\n})","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect } from 'react-redux'\r\n\r\nconst MovieDetail = ({currentMovie}) => {\r\n    return (\r\n        <div className='page-detail-wrapper netflix-text-color'>\r\n            <div className='current-movie-title'>\r\n                <header>\r\n                    <h2 className='display-3\"'>{currentMovie.title}</h2>\r\n                </header>\r\n            </div>\r\n            <div className='detail-info-wrapper'>\r\n                <div className='current-movie-img-container'>\r\n                    <img src={`https://image.tmdb.org/t/p/w500${currentMovie.posterPath}`} className='img'/>\r\n                </div>\r\n                <div className='movie-item-info-container'>\r\n                    <div>\r\n                        <h4>Popularity</h4>\r\n                        <p className='text-white-50'>{currentMovie.popularity}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Vote average</h4>\r\n                        <p className='text-white-50'>{currentMovie.voteAverage}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Release date</h4>\r\n                        <p className='text-white-50'>{currentMovie.releaseDate}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Overview</h4>\r\n                        <p className='text-white-50'>{currentMovie.overview}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nMovieDetail.propTypes = {\r\n    currentMovie: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentMovie: state.selectedItems.currentMovie\r\n})\r\n\r\nexport default connect(mapStateToProps)(MovieDetail);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect } from 'react-redux'\r\n\r\nconst TvShowDetail = ({currentTvShow}) => {\r\n    return (\r\n        <div className='page-detail-wrapper netflix-text-color'>\r\n            <div className='current-movie-title'>\r\n                <header>\r\n                    <h2 className='display-3\"'>{currentTvShow.name}</h2>\r\n                </header>\r\n            </div>\r\n            <div className='detail-info-wrapper'>\r\n                <div className='current-movie-img-container'>\r\n                    <img src={`https://image.tmdb.org/t/p/w500${currentTvShow.posterPath}`} className='img'/>\r\n                </div>\r\n                <div className='movie-item-info-container'>\r\n                    <div>\r\n                        <h4>Popularity</h4>\r\n                        <p className='text-white-50'>{currentTvShow.popularity}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Vote average</h4>\r\n                        <p className='text-white-50'>{currentTvShow.voteAverage}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>First Air Date</h4>\r\n                        <p className='text-white-50'>{currentTvShow.firstAirDate}</p>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Overview</h4>\r\n                        <p className='text-white-50'>{currentTvShow.overview}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTvShowDetail.propTypes = {\r\n    currentTvShow: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    currentTvShow: state.selectedItems.currentTvShow\r\n})\r\n\r\nexport default connect(mapStateToProps)(TvShowDetail);","import React, {Fragment} from 'react';\r\nimport {HashRouter as Routes, Route, Switch} from \"react-router-dom\";\r\nimport AppNavbar from \"./components/Layout/AppNavbar\";\r\nimport HomePage from \"./components/DashBoard/HomePage\";\r\nimport MoviesPage from \"./components/DashBoard/MoviesPage\";\r\nimport TvShowsPage from \"./components/DashBoard/TvShowsPage\";\r\nimport SearchPage from \"./components/SearchPage\";\r\n//Redux\r\nimport {Provider} from 'react-redux';\r\nimport store from \"./store\";\r\nimport MovieDetail from \"./components/ItemDetail/MovieDetail\";\r\nimport TvShowDetail from \"./components/ItemDetail/TvShowDetail\";\r\n\r\nfunction App() {\r\n  return (\r\n      <Provider store={store}>\r\n          <Routes>\r\n              <Fragment>\r\n                  <AppNavbar/>\r\n                  <Switch>\r\n                      <Route exact path='/' component={HomePage}/>\r\n                      <Route exact path='/movies' component={MoviesPage}/>\r\n                      <Route exact path='/tv-shows' component={TvShowsPage}/>\r\n                      <Route exact path='/search/:keyword' component={SearchPage}/>\r\n                      <Route exact path='/movie/:movie_name' component={MovieDetail}/>\r\n                      <Route exact path='/tv-show/:tv_show_name' component={TvShowDetail}/>\r\n                  </Switch>\r\n              </Fragment>\r\n          </Routes>\r\n      </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n/*css imports*/\r\nimport './index.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/movie.49f95281.jpg\";"],"sourceRoot":""}